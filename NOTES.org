* Notes on build system variables

OpenBLAS =make= variables:

- =SYMBOLSUFFIX=: OpenBLAS make variable to define symbol suffix
- =INTERFACE64=: tell OpenBLAS to use 64 bit integers

Julia =make= variables:

- =USE_BLAS64=: control use of 64 bit integers for blas
- =OPENBLAS_SYMBOLSUFFIX=: sets blas symbol suffix

* Control of integer size for OpenBLAS

Running =make= generates a file =config.h= in the top level directory of
OpenBLAS.  If the following C macro is defined, then C source gets compiles with
64-bit integers.  Fortran integer size is controled via a compiler flag.

From =config.h= (generated in build process):

#+BEGIN_EXAMPLE
#define USE64BITINT
#+END_EXAMPLE

* End of build steps for OpenBLAS

#+BEGIN_EXAMPLE

# generate symbol translation files
perl ./gensymbol objcopy x86_64 _ 0 0  0 0 0 0 "" "64_" > objcopy.def
perl ./gensymbol objconv x86_64 _ 0 0  0 0 0 0 "" "64_" > objconv.def
perl ./gensymbol linktest  x86_64 _ 0 0 0 0 0 0 "" "64_" > linktest.c

# translate symbols in archive file
objcopy --redefine-syms objcopy.def ../libopenblas_sandybridgep-r0.2.13.a ../libopenblas_sandybridgep-r0.2.13.a.renamed

# link into a shared object
gcc -O2 -Wall -m64 -DF_INTERFACE_GFORT -fPIC -DSMP_SERVER -DNO_WARMUP \
  -DMAX_CPU_NUMBER=8 -DASMNAME= -DASMFNAME=_ -DNAME=_ -DCNAME= \
  -DCHAR_NAME=\"_\" -DCHAR_CNAME=\"\" -DNO_AFFINITY -I..  \
  -shared -o ../libopenblas_sandybridgep-r0.2.13.so \
  -Wl,--whole-archive ../libopenblas_sandybridgep-r0.2.13.a.renamed \
  -Wl,--no-whole-archive \
  -Wl,-soname,libopenblas.so.0 -lm -lpthread -lgfortran -lm -lpthread -lgfortran

# test linking against shared object
gcc -O2 -Wall -m64 -DF_INTERFACE_GFORT -fPIC -DSMP_SERVER -DNO_WARMUP \
  -DMAX_CPU_NUMBER=8 -DASMNAME= -DASMFNAME=_ -DNAME=_ -DCNAME= \
  -DCHAR_NAME=\"_\" -DCHAR_CNAME=\"\" -DNO_AFFINITY -I..  -w -o \
  linktest linktest.c ../libopenblas_sandybridgep-r0.2.13.so  && echo OK.
#+END_EXAMPLE

* =objcopy.def= example (linux)

The file =objcopy.def= is generated by the =gensymbol= perl script and located
in =OpenBLAS/exports=.

The first several lines of the file are:

#+BEGIN_EXAMPLE
caxpy_ caxpy_64_
ccopy_ ccopy_64_
cdotc_ cdotc_64_
cdotu_ cdotu_64_
cgbmv_ cgbmv_64_
cgemm_ cgemm_64_
cgemv_ cgemv_64_
#+END_EXAMPLE

=objcopy --redefine-syms= essentially does a string replace on the symbols.
* OpenBLAS =gfortran= calls

With: =make SYMBOLSUFFIX=64_ INTERFACE64=1=

#+BEGIN_EXAMPLE
gfortran -O2 -Wall -m64 -fdefault-integer-8 -fPIC -c sgbbrd.f -o sgbbrd.o
#+END_EXAMPLE

* OpenBLAS, creation of archive on linux

OpenBLAS creates an archive file with:

#+BEGIN_EXAMPLE
ar -ru ../../../libopenblas_sandybridgep-r0.2.13.a lapacke_cgb_nancheck.o ...
#+END_EXAMPLE

Then runs a command:

#+BEGIN_EXAMPLE
ranlib ../../../libopenblas_sandybridgep-r0.2.13.a
#+END_EXAMPLE

From =man ranlib=:

#+BEGIN_EXAMPLE
ranlib - generate index to archive.
#+END_EXAMPLE

The archive file is later turned into a shared object.

* Converting =.a= to =.so=

Reference: http://stackoverflow.com/questions/7935421/linking-archives-a-into-shared-object-so

For =gcc= need to use =-Wl,--whole-archive file.a -Wl,--no-whole-archive=

* Build OpenBLAS on Mac

To build and capture output:

#+BEGIN_EXAMPLE
make SYMBOLSUFFIX=64_ INTERFACE64=1 &> build64.out
#+END_EXAMPLE

The =objconv= call:

#+BEGIN_EXAMPLE
objconv @objconv.def ../libopenblas_haswellp-r0.2.13.a ../libopenblas_haswellp-r0.2.13.a.renamed
#+END_EXAMPLE

=gfortran= call:

#+BEGIN_EXAMPLE
gfortran -O2 -m128bit-long-double -Wall -m64 -fdefault-integer-8 -fPIC -c sgbbrd.f -o sgbbrd.o
#+END_EXAMPLE

Create archive:

#+BEGIN_EXAMPLE
ar  -ru ../libopenblas_penrynp-r0.2.13.a saxpy.o sswap.o
#+END_EXAMPLE

Create dynamic library (osx uses gfortran to build dylib):

#+BEGIN_EXAMPLE
gfortran -O2 -m128bit-long-double -Wall -m64 -fdefault-integer-8 -fPIC -all_load \
  -headerpad_max_install_names -install_name \
  /Users/nwh/projects/OpenBLAS/exports/../libopenblas_penrynp-r0.2.13.dylib \
  -dynamiclib -o ../libopenblas_penrynp-r0.2.13.dylib \
  ../libopenblas_penrynp-r0.2.13.a.renamed -Wl,-exported_symbols_list,osx.def
#+END_EXAMPLE

* =objconv.def= example (osx)

Note the prefix underscore.

#+BEGIN_EXAMPLE
-nr:_damax_:_damax_64_
-nr:_damin_:_damin_64_
-nr:_dasum_:_dasum_64_
-nr:_daxpy_:_daxpy_64_
-nr:_dcabs1_:_dcabs1_64_
-nr:_dcopy_:_dcopy_64_
-nr:_ddot_:_ddot_64_
-nr:_dgbmv_:_dgbmv_64_
-nr:_dgemm_:_dgemm_64_
#+END_EXAMPLE

* =objconv= tool for osx

Website: http://www.agner.org/optimize/#objconv

Download: http://www.agner.org/optimize/objconv.zip

Steps to download and compile:

#+BEGIN_EXAMPLE
curl -O http://www.agner.org/optimize/objconv.zip
unzip -d objconv-dir objconv.zip
unzip -d objconv-src objconv-dir/source.zip
clang++ -O2 -o objconv objconv-src/*.cpp
#+END_EXAMPLE

Now the =objconv= tool is available.

* osx symbols in Julia's =libopenblas.dylib=

Note the prefix underscore.

#+BEGIN_EXAMPLE
0000000000020900 T _cblas_dgemm64_
000000000001f4d0 T _dgemm_64_
#+END_EXAMPLE
* Building a dynamic library on osx

References:
- http://stackoverflow.com/questions/3532589/how-to-build-a-dylib-from-several-o-in-mac-os-x-using-gcc
- https://developer.apple.com/library/mac/documentation/DeveloperTools/Conceptual/DynamicLibraries/100-Articles/CreatingDynamicLibraries.html

