* Notes on build system variables

OpenBLAS =make= variables:

- =SYMBOLSUFFIX=: OpenBLAS make variable to define symbol suffix
- =INTERFACE64=: tell OpenBLAS to use 64 bit integers

Julia =make= variables:

- =USE_BLAS64=: control use of 64 bit integers for blas
- =OPENBLAS_SYMBOLSUFFIX=: sets blas symbol suffix

* Control of integer size for OpenBLAS

Running =make= generates a file =config.h= in the top level directory of
OpenBLAS.  If the following C macro is defined, then C source gets compiles with
64-bit integers.  Fortran integer size is controled via a compiler flag.

From =config.h= (generated in build process):

#+BEGIN_EXAMPLE
#define USE64BITINT
#+END_EXAMPLE

* End of build steps for OpenBLAS

#+BEGIN_EXAMPLE

# generate symbol translation files
perl ./gensymbol objcopy x86_64 _ 0 0  0 0 0 0 "" "64_" > objcopy.def
perl ./gensymbol objconv x86_64 _ 0 0  0 0 0 0 "" "64_" > objconv.def
perl ./gensymbol linktest  x86_64 _ 0 0 0 0 0 0 "" "64_" > linktest.c

# translate symbols in archive file
objcopy --redefine-syms objcopy.def ../libopenblas_sandybridgep-r0.2.13.a ../libopenblas_sandybridgep-r0.2.13.a.renamed

# link into a shared object
gcc -O2 -Wall -m64 -DF_INTERFACE_GFORT -fPIC -DSMP_SERVER -DNO_WARMUP \
  -DMAX_CPU_NUMBER=8 -DASMNAME= -DASMFNAME=_ -DNAME=_ -DCNAME= \
  -DCHAR_NAME=\"_\" -DCHAR_CNAME=\"\" -DNO_AFFINITY -I..  \
  -shared -o ../libopenblas_sandybridgep-r0.2.13.so \
  -Wl,--whole-archive ../libopenblas_sandybridgep-r0.2.13.a.renamed \
  -Wl,--no-whole-archive \
  -Wl,-soname,libopenblas.so.0 -lm -lpthread -lgfortran -lm -lpthread -lgfortran

# test linking against shared object
gcc -O2 -Wall -m64 -DF_INTERFACE_GFORT -fPIC -DSMP_SERVER -DNO_WARMUP \
  -DMAX_CPU_NUMBER=8 -DASMNAME= -DASMFNAME=_ -DNAME=_ -DCNAME= \
  -DCHAR_NAME=\"_\" -DCHAR_CNAME=\"\" -DNO_AFFINITY -I..  -w -o \
  linktest linktest.c ../libopenblas_sandybridgep-r0.2.13.so  && echo OK.
#+END_EXAMPLE

* =objcopy.def= example

The file =objcopy.def= is generated by the =gensymbol= perl script and located
in =OpenBLAS/exports=.

The first several lines of the file are:

#+BEGIN_EXAMPLE
caxpy_ caxpy_64_
ccopy_ ccopy_64_
cdotc_ cdotc_64_
cdotu_ cdotu_64_
cgbmv_ cgbmv_64_
cgemm_ cgemm_64_
cgemv_ cgemv_64_
#+END_EXAMPLE

=objcopy --redefine-syms= essentially does a string replace on the symbols.
* OpenBLAS =gfortran= calls

With: =make SYMBOLSUFFIX=64_ INTERFACE64=1=

#+BEGIN_EXAMPLE
gfortran -O2 -Wall -m64 -fdefault-integer-8 -fPIC -c sgbbrd.f -o sgbbrd.o
#+END_EXAMPLE

* OpenBLAS, creation of archive

OpenBLAS creates an archive file with:

#+BEGIN_EXAMPLE
ar -ru ../../../libopenblas_sandybridgep-r0.2.13.a lapacke_cgb_nancheck.o ...
#+END_EXAMPLE

Then runs a command:

#+BEGIN_EXAMPLE
ranlib ../../../libopenblas_sandybridgep-r0.2.13.a
#+END_EXAMPLE

From =man ranlib=:

#+BEGIN_EXAMPLE
ranlib - generate index to archive.
#+END_EXAMPLE

The archive file is later turned into a shared object.
